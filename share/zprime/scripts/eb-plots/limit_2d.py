import atlas_mpl_style as ampl
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Rectangle

ampl.use_atlas_style(usetex=False)

# data
cuts_high = np.linspace(0, 0.5, 26)
cuts_high = (cuts_high * 100).astype(int) / 100.0
cuts_low = np.linspace(0.3, 0.8, 26)
cuts_low = (cuts_low * 100).astype(int) / 100.0
mass_points_high = [42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75]
mass_points_low = [5, 7, 9, 11, 13, 15, 17, 19, 23, 27, 31, 35, 39]

limits_low = np.array(
    [
        [0.002386337, 0.002384506, 0.0023815, 0.002379792, 0.00237884, 0.002378545, 0.002378544, 0.002378886, 0.002378858, 0.002382021, 0.002382303, 0.002386519, 0.002395759, 0.00240544, 0.002412001, 0.002434385, 0.002466465, 0.002501774, 0.002560639, 0.002671354, 0.00281125, 0.003032886, 0.003355103, 0.003933477, np.nan, np.nan],
        [0.002905347, 0.002902718, 0.002899727, 0.002898179, 0.002895308, 0.002893289, 0.002891042, 0.002890252, 0.002889793, 0.002888317, 0.002889704, 0.002891185, 0.002893132, 0.002898709, 0.002907041, 0.002923815, 0.002954885, 0.002993544, 0.003052163, 0.003141137, 0.003294844, 0.003522768, 0.003913382, 0.00457616, np.nan, np.nan],
        [0.003277854, 0.003274708, 0.003271512, 0.003270813, 0.003268887, 0.00326625, 0.003262048, 0.003260428, 0.003259676, 0.003258867, 0.003259255, 0.003260887, 0.003261349, 0.003265259, 0.003273471, 0.003288648, 0.003305373, 0.003340181, 0.003399991, 0.003484542, 0.003609363, 0.003833236, 0.004211034, 0.004811965, 0.00594283, np.nan],
        [0.003536555, 0.003532647, 0.003530233, 0.003527118, 0.003524463, 0.003523391, 0.003519166, 0.003517116, 0.003517735, 0.003518162, 0.003519453, 0.003521869, 0.003522343, 0.003525142, 0.003533148, 0.003546316, 0.003565915, 0.0036034, 0.003655444, 0.003736699, 0.00387528, 0.004104107, 0.004394127, 0.004862545, 0.005548477, 0.006903945],
        [0.003800686, 0.003796657, 0.003794439, 0.003792349, 0.003789742, 0.003788668, 0.003786721, 0.003785932, 0.003784148, 0.003783247, 0.003786972, 0.003786045, 0.003786866, 0.003787024, 0.003798375, 0.003814185, 0.003839906, 0.00386283, 0.003907132, 0.00397983, 0.004096153, 0.004229139, 0.004450158, 0.004774224, 0.005260124, 0.006077301],
        [0.003920066, 0.003914898, 0.003912332, 0.003910786, 0.003909284, 0.003908264, 0.003905374, 0.003902608, 0.003902713, 0.003900943, 0.003902442, 0.003901242, 0.003905139, 0.003907317, 0.00391473, 0.003916761, 0.003939343, 0.00397099, 0.004000647, 0.004075477, 0.004157039, 0.004268105, 0.004455783, 0.00474401, 0.005140145, 0.00575411],
        [0.004085807, 0.004079369, 0.004071248, 0.004068642, 0.004071012, 0.00406916, 0.004068105, 0.004067191, 0.004062876, 0.004059701, 0.004060433, 0.004059967, 0.004060509, 0.004062591, 0.004061874, 0.004064108, 0.004078916, 0.004101342, 0.004126902, 0.004160814, 0.004219319, 0.004304143, 0.004426737, 0.004622915, 0.004958531, 0.00551457],
        [0.004266648, 0.004260596, 0.004253012, 0.004247759, 0.004245521, 0.004243591, 0.004241319, 0.004241187, 0.004239746, 0.004237498, 0.004239164, 0.004239016, 0.004236678, 0.004239322, 0.004241945, 0.004247728, 0.004256595, 0.004271906, 0.004289902, 0.004321733, 0.004364503, 0.004413013, 0.004507181, 0.004620238, 0.004810934, 0.005127403],
        [0.004557581, 0.00454632, 0.004536111, 0.004527671, 0.004517052, 0.004506961, 0.004501165, 0.004496311, 0.004493428, 0.004488361, 0.004485854, 0.004483627, 0.004480712, 0.004481891, 0.004482454, 0.004484654, 0.00448665, 0.004488556, 0.004497082, 0.004507667, 0.004524276, 0.004538718, 0.004575037, 0.004635442, 0.004713965, 0.004865498],
        [0.005069759, 0.005044912, 0.005022987, 0.005002569, 0.00497698, 0.004958347, 0.004949431, 0.004935618, 0.004919796, 0.00491465, 0.004896711, 0.004889986, 0.004890383, 0.004891263, 0.004888643, 0.004886385, 0.004889187, 0.004890483, 0.004895763, 0.0049021, 0.004906029, 0.004925824, 0.004940869, 0.004980986, 0.005024971, 0.005084425],
        [0.006031205, 0.006012328, 0.00596985, 0.00593243, 0.005901235, 0.005863704, 0.005838959, 0.005799259, 0.005760937, 0.005736339, 0.005705724, 0.00568948, 0.005673214, 0.005656527, 0.005635653, 0.00562593, 0.005620933, 0.005613908, 0.005613327, 0.00560529, 0.005611997, 0.005621404, 0.005641179, 0.005666095, 0.005713508, 0.0057723],
        [0.006765088, 0.006736154, 0.006688002, 0.006657706, 0.006622067, 0.006586357, 0.006529578, 0.006497574, 0.006448735, 0.006404617, 0.006350378, 0.00631829, 0.006274765, 0.006241975, 0.006224472, 0.006194643, 0.006168088, 0.006152097, 0.006138091, 0.006129136, 0.006121026, 0.006122417, 0.006142528, 0.006171097, 0.006208289, 0.006259836],
        [0.008703032, 0.008653896, 0.008599788, 0.008530246, 0.008445971, 0.008369914, 0.00830888, 0.008217016, 0.008159043, 0.008087495, 0.008029656, 0.007922619, 0.00786281, 0.007810125, 0.007771839, 0.007720585, 0.007667734, 0.007643349, 0.00762763, 0.007599701, 0.007584023, 0.007551734, 0.007550376, 0.007569553, 0.007595386, 0.007622818],
    ]
)
limits_low = np.log10(limits_low)

limits_high = np.array(
    [
        [0.012730171, 0.011883263, 0.01146903, 0.011369862, 0.011339871, 0.011234814, 0.011192193, 0.011281768, 0.011317851, 0.011457642, 0.011743468, 0.011978757, 0.012367092, 0.012791673, 0.013261709, 0.014023967, 0.014622229, 0.015509395, 0.016268811, 0.017360352, 0.01846071, 0.020309726, 0.022156439, 0.025524134, 0.029710752, 0.035557493],
        [0.013716652, 0.012818972, 0.01224465, 0.011997974, 0.011863232, 0.011771167, 0.011765344, 0.011813262, 0.011868963, 0.012022665, 0.012208169, 0.012571868, 0.012786109, 0.013097349, 0.013571705, 0.014333203, 0.01483784, 0.015883246, 0.016950849, 0.018006385, 0.019026903, 0.021510554, 0.024331769, 0.027876674, 0.032170428, 0.040340061],
        [0.017596519, 0.016383369, 0.015581764, 0.01513428, 0.014921958, 0.014800446, 0.014823068, 0.014859123, 0.014949099, 0.015112688, 0.015278155, 0.015567062, 0.015873682, 0.016330005, 0.016702843, 0.017398507, 0.018398914, 0.019305, 0.020385279, 0.022345489, 0.024458498, 0.027146983, 0.031015889, 0.03739656, 0.045537882, np.nan],
        [0.023473375, 0.021708909, 0.020575107, 0.019969677, 0.019783833, 0.01953997, 0.019549415, 0.019431214, 0.019433516, 0.019552875, 0.019805064, 0.02021482, 0.020431451, 0.020935285, 0.021740035, 0.022452952, 0.023167035, 0.024491586, 0.026699757, 0.028950233, 0.032307201, 0.037370511, 0.044551087, 0.053627969, np.nan, np.nan],
        [0.029581946, 0.026816886, 0.025275306, 0.024372646, 0.023895327, 0.023717624, 0.02357105, 0.023606534, 0.02371669, 0.023983754, 0.024406837, 0.02518403, 0.026041855, 0.027296868, 0.028438625, 0.03037451, 0.031878354, 0.034749637, 0.038187321, 0.04170177, 0.048258226, 0.057265818, 0.070132373, np.nan, np.nan, np.nan],
        [0.040619907, 0.035734913, 0.033191366, 0.032192822, 0.031449197, 0.03101677, 0.030785777, 0.030913849, 0.031335448, 0.031799693, 0.032347141, 0.033186822, 0.034523923, 0.035809941, 0.038225331, 0.041366693, 0.044532978, 0.048535437, 0.05435512, 0.063799204, 0.074582799, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.057557656, 0.048736186, 0.044971955, 0.042963377, 0.041756677, 0.041700649, 0.041193328, 0.041387051, 0.042016445, 0.04264367, 0.043741629, 0.045631611, 0.047362656, 0.049814027, 0.054421949, 0.059838844, 0.066801378, 0.075566186, 0.088260325, 0.105180094, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.084445138, 0.069461233, 0.06430229, 0.062269662, 0.061232527, 0.06097153, 0.060820734, 0.061201335, 0.061883239, 0.064124815, 0.066379136, 0.069425391, 0.073967333, 0.079062637, 0.084461234, 0.091711718, 0.101770407, 0.112758157, 0.131882579, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.125968343, 0.10146896, 0.093789258, 0.089905216, 0.087734738, 0.087332789, 0.086972496, 0.086927826, 0.088251744, 0.090154624, 0.093407423, 0.097819468, 0.101596928, 0.108682741, 0.114079496, 0.119738662, 0.13093352, 0.144830355, 0.169465324, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.188004706, 0.14860112, 0.136488255, 0.130743335, 0.127576823, 0.123953747, 0.122130219, 0.121432523, 0.121405585, 0.123189793, 0.125447939, 0.12859978, 0.13140787, 0.137601595, 0.14323342, 0.152079872, 0.168966167, 0.18843322, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.255426841, 0.198242689, 0.178760463, 0.16802504, 0.160205283, 0.152504828, 0.147404249, 0.14352224, 0.141042132, 0.140610679, 0.141873, 0.144324702, 0.150058416, 0.157209237, 0.164686425, 0.173982036, 0.19658627, 0.216415583, 0.24968336, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
        [0.308373448, 0.236712657, 0.210804673, 0.194745048, 0.183863556, 0.174565763, 0.170261386, 0.16672946, 0.166358368, 0.16679091, 0.169454975, 0.173360126, 0.181639594, 0.192022298, 0.204501346, 0.224066791, 0.252070768, 0.275093468, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
    ],
)
limits_high = np.log10(limits_high)

# plot low mass
fig, ax = plt.subplots(figsize=(18, 8))
im = ax.imshow(limits_low, cmap="plasma")
# create colorbar
cbar = ax.figure.colorbar(im, ax=ax)
cbar.ax.set_ylabel("couping limits [log]", rotation=-90, va="bottom")
# highlight selected cuts
ax.add_patch(Rectangle((5.5, -0.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 5
ax.add_patch(Rectangle((8.5, 0.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 7
ax.add_patch(Rectangle((8.5, 1.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 9
ax.add_patch(Rectangle((6.5, 2.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 11
ax.add_patch(Rectangle((8.5, 3.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 13
ax.add_patch(Rectangle((8.5, 4.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 15
ax.add_patch(Rectangle((8.5, 5.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 17
ax.add_patch(Rectangle((11.5, 6.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 19
ax.add_patch(Rectangle((11.5, 7.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 23
ax.add_patch(Rectangle((14.5, 8.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 27
ax.add_patch(Rectangle((18.5, 9.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 31
ax.add_patch(Rectangle((19.5, 10.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 35
ax.add_patch(Rectangle((21.5, 11.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 39

# adjustment
ax.set_xlabel("DNN cut")
ax.set_xticks(np.arange(len(cuts_low)))
ax.set_yticks(np.arange(len(mass_points_low)))
ax.set_ylabel("mass [GeV]")
ax.set_xticklabels(cuts_low)
ax.set_yticklabels(mass_points_low)
ax.set_title("limits - mass vs cuts")
fig.tight_layout()
ampl.plot.draw_atlas_label(0.05, 0.95, ax=ax, status="wip", energy="13 TeV", lumi=139, color="white")
# save
fig.savefig("limit_2d_cut_vs_mass_low.png")


# plot high mass
fig, ax = plt.subplots(figsize=(18, 8))
im = ax.imshow(limits_high, cmap="plasma")
# create colorbar
cbar = ax.figure.colorbar(im, ax=ax)
cbar.ax.set_ylabel("couping limits [log]", rotation=-90, va="bottom")
# highlight selected cuts
ax.add_patch(Rectangle((7.5, -0.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 42
ax.add_patch(Rectangle((6.5, 0.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 45
ax.add_patch(Rectangle((6.5, 1.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 48
ax.add_patch(Rectangle((6.5, 2.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 51
ax.add_patch(Rectangle((6.5, 3.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 54
ax.add_patch(Rectangle((6.5, 4.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 57
ax.add_patch(Rectangle((5.5, 5.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 60
ax.add_patch(Rectangle((5.5, 6.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 63
ax.add_patch(Rectangle((5.5, 7.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 66
ax.add_patch(Rectangle((6.5, 8.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 69
ax.add_patch(Rectangle((6.5, 9.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 72
ax.add_patch(Rectangle((6.5, 10.5), 1, 1, fill=False, edgecolor="aqua", lw=3))  # 75
# adjustment
ax.set_xlabel("DNN cut")
ax.set_xticks(np.arange(len(cuts_high)))
ax.set_yticks(np.arange(len(mass_points_high)))
ax.set_ylabel("mass [GeV]")
ax.set_xticklabels(cuts_high)
ax.set_yticklabels(mass_points_high)
ax.set_title("limits - mass vs cuts")
fig.tight_layout()
ampl.plot.draw_atlas_label(0.05, 0.95, ax=ax, status="wip", energy="13 TeV", lumi=139, color="white")
# save
fig.savefig("limit_2d_cut_vs_mass_high.png")
